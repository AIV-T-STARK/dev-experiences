≪SUMMARY≫
  Bìa này sẽ nói cụ thể và demo cụ thể sự khác nhau giữa hai thằng React.Component và React.PureComponent.
  Chắc không ít bạn cũng đã từng bị phỏng vấn câu này rồi, nhưng không ít bạn trả lời theo kiểu lý thuyết. OK mình sẽ giúp
  các bạn hiểu sâu hơn một chút.
  
☞ Tóm lại thì 2 thằng này khác nhau ở một số điểm sau:
  - React.Component cho phép dev overide lại shouldComponentUpdate hook, mặc định hook này reference compare để quyết
    định re-render lại hay không.
  - React.PureComponent không có phép dev overide lại shouldComponentUpdate hook, hook này shallow compare để quyết
    định re-render lại hay không.
-----------------------------------------------------------------------------------------------------------------


≪NỘI DUNG≫
  Để mình lấy một ví dụ đơn giản nhất, trước khi đọc bài này có lẽ bạn nên đọc một chút về lifecycle hook.
    https://github.com/nguyenvanhoang26041994/dev-experiences/blob/master/React/lifecycle_hook
☞ Step 1: 
  class Demo extends React.Component {
    state = { myName: 'Hoang' };
    
    componentDidMount() {
      this.setState({ myName: 'Hoang' });
    }
    
    componentDidUpdate() {
      console.log(`Component này đã render lại với state.myName: ${this.state.myName}`);
    }
    
    render() {
      return (
        <span>My name is {this.state.myName}</span>
      );
    }
  }
  
  Kết quả là ở màn hình console sẽ thấy dòng chữ "Component này đã render lại với state.myName: Hoang".
  Rõ ràng thì trước và sau render lại thì myName vẫn là 'Hoang' mà đúng không?. Tại sao phải re-render nữa làm
  gì cho tốn công?. Lý do nó render lại là do mặc đinh shouldComponentUpdate reference compare.
  Okay, để chống sự render không cần thiết này, mình sẽ overide lại shouldComponentUpdate hook.

☞ Step 2: 
  class Demo extends React.Component {
    state = { myName: 'Hoang' };
    
    componentDidMount() {
      this.setState({ myName: 'Hoang' });
    }
    
    shouldComponentUpdate(nextProps, nextState) {
      return nextState.myName !== this.state.myName
    }
    
    componentDidUpdate() {
      console.log(`Component này đã render lại với state.myName: ${this.state.myName}`);
    }
    
    render() {
      return (
        <span>My name is {this.state.myName}</span>
      );
    }
  }
  
  Okay!, lần này nó đã không re-render lại nữa rồi. Nhưng, nhưng mà chả nhẽ có bao nhiêu state, bao nhiêu props thì mình
  phải so sánh cho hết ư?. Thế thì code lắm. hãy để React.PureComponent giải quyết một cách ngắn gọn.
  
☞ Step 3: 
  class Demo extends React.PureComponent {
    state = { myName: 'Hoang' };
    
    componentDidMount() {
      this.setState({ myName: 'Hoang' });
    }
    
    componentDidUpdate() {
      console.log(`Component này đã render lại với state.myName: ${this.state.myName}`);
    }
    
    render() {
      return (
        <span>My name is {this.state.myName}</span>
      );
    }
  }
  
  Thế là xong!, đơn giản!. Vậy là đã chống re-render không cần thiết ở mức độ shallow level.
  Tuy nhiên, tuy nhiên, Vì javascript là dynamic type nên bạn không biết props ở runtime là kiểu gì.
  Nên PureComponent vẫn compare cả những props mình không cần quan tâm đến, khiến render vô tội vạ.
  Ví dụ ở nơi nào đó sử dụng Component Demo như sau:
  
  class WrapperComponent extends React.Component {
    state = { something: 'something' };
    
    componentDidMount() {
      this.setState({ something: 'something change' });
    }
    
    render() {
      return (
        <Demo something={this.state.something}/>
      );
    }
  }
  
  Lúc nãy thì dòng "Component này đã render lại với state.myName: Hoang" sẽ xuất hiện ở màn hình console. Đây là một
  trong những nhược điểm của PureComponent. Lúc này Component sẽ là thích hợp hơn vì nó flexible, tuỳ dev.
----------------------------------------------------------------------------------------------------
  
  
≪MỘT VÀI CHIA SẺ THÊM≫
  - Hồi xưa cũng toàn dùng React.Component thôi chứ chả dùng Functional hay PureComponent đâu. Từ khi bật source code
    một số thư viện thì thấy PureComponent và Functional Component nên cũng đặt câu hỏi tại sao họ code vậy?.
    

Tác giả: Nguyễn Văn Hoàng  
